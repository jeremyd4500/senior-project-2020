# Generated by Django 3.1.1 on 2020-09-30 01:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sex', models.IntegerField(choices=[(0, 'MALE'), (1, 'FEMALE')], null=True)),
                ('phone', models.CharField(max_length=255, null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('city', models.CharField(max_length=255, null=True)),
                ('state', models.CharField(choices=[(0, 'Alabama - AL'), (1, 'Alaska - AK'), (2, 'Arizona - AZ'), (3, 'Arkansas - AR'), (4, 'California - CA'), (5, 'Colorado - CO'), (6, 'Connecticut - CT'), (7, 'Delaware - DE'), (8, 'Florida - FL'), (9, 'Georgia - GA'), (10, 'Hawaii - HI'), (11, 'Idaho - ID'), (12, 'Illinois - IL'), (13, 'Indiana - IN'), (14, 'Iowa - IA'), (15, 'Kansas - KS'), (16, 'Kentucky - KY'), (17, 'Louisiana - LA'), (18, 'Maine - ME'), (19, 'Maryland - MD'), (20, 'Massachusetts - MA'), (21, 'Michigan - MI'), (22, 'Minnesota - MN'), (23, 'Mississippi - MS'), (24, 'Missouri - MO'), (25, 'Montana - MT'), (26, 'Nebraska - NE'), (27, 'Nevada - NV'), (28, 'New Hampshire - NH'), (29, 'New Jersey - NJ'), (30, 'New Mexico - NM'), (31, 'New York - NY'), (32, 'North Carolina - NC'), (33, 'North Dakota - ND'), (34, 'Ohio - OH'), (35, 'Oklahoma - OK'), (36, 'Oregon - OR'), (37, 'Pennsylvania - PA'), (38, 'Rhode Island - RI'), (39, 'South Carolina - SC'), (40, 'South Dakota - SD'), (41, 'Tennessee - TN'), (42, 'Texas - TX'), (43, 'Utah - UT'), (44, 'Vermont - VT'), (45, 'Virginia - VA'), (46, 'Washington - WA'), (47, 'West Virginia - WV'), (48, 'Wisconsin - WI'), (49, 'Wyoming - WY')], max_length=255, null=True)),
                ('user_role', models.IntegerField(choices=[(0, 'Admin'), (1, 'Doctor'), (2, 'Patient')], default=2)),
                ('date_of_birth', models.DateField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
